generator client {
  provider        = "prisma-client"
  previewFeatures = ["relationJoins"]
  output          = "../app/generated/prisma"
}

// https://prisma.io/docs/accelerate/local-development

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(ulid())

  email         String  @unique
  emailVerified Boolean @default(false)

  name      String
  firstName String?
  lastName  String?

  username        String? @unique
  displayUsername String?

  phone               String?  @unique
  phoneNumber         String?  @unique
  phoneNumberVerified Boolean? @default(false)

  image String?
  lang  String? @default("en")
  theme String? @default("")

  role       String? // user | admin
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  isAnonymous      Boolean?
  twoFactorEnabled Boolean?

  sessions   Session[]
  accounts   Account[]
  twofactors TwoFactor[]
  passkeys   Passkey[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, username])
}

model Session {
  id String @id @default(ulid())

  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, token])
}

model Account {
  id String @id @default(ulid())

  accountId  String
  providerId String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Verification {
  id String @id @default(ulid())

  identifier String
  value      String
  expiresAt  DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([identifier])
}

model TwoFactor {
  id String @id @default(ulid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  secret      String?
  backupCodes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([secret])
}

model Passkey {
  id String @id @default(ulid())

  name      String?
  publicKey String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  aaguid       String?

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([userId])
}

model Example {
  id String @id @default(ulid())

  slug String @unique
  name String

  items ExampleItem[]
}

model ExampleItem {
  id String @id @default(ulid())

  slug String @unique
  name String

  example   Example? @relation(fields: [exampleId], references: [id])
  exampleId String?
}
